{
  "hash": "ba555b7a342a33100ad90e1ac2231fc8",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"SLR: Conditions\"\nauthor: \"Prof. Eric Friedlander\"\nfooter: \"[🔗 MAT 212 - Winter 2025 -  Schedule](https://mat212wi25.netlify.app/schedule)\"\nlogo: \"../images/logo.png\"\nformat: \n  revealjs:\n    theme: slides.scss\n    multiplex: false\n    transition: fade\n    slide-number: false\n    incremental: false \n    chalkboard: true\nhtml-math-method:\n  method: mathjax\n  url: \"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\"\nexecute:\n  freeze: auto\n  echo: true\n  cache: false\nknitr:\n  opts_chunk: \n    R.options:      \n    width: 200\nbibliography: references.bib  \n---\n\n\n\n\n\n# Application exercise\n\n::: appex\n📋 [AE 05 - Model Conditions](/ae/ae-05-conditions.qmd)\n:::\n\nComplete Exercise 0.\n\n## Computational set up\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# load packages\nlibrary(tidyverse)   # for data wrangling and visualization\nlibrary(ggformula)   # for plotting using formulas\nlibrary(broom)       # for formatting model output\nlibrary(scales)      # for pretty axis labels\nlibrary(knitr)       # for pretty tables\nlibrary(kableExtra)  # also for pretty tables\nlibrary(patchwork)   # arrange plots\n\n# Spotify Dataset\nspotify <- read_csv(\"../data/spotify-popular.csv\")\n\n# set default theme and larger font size for ggplot2\nggplot2::theme_set(ggplot2::theme_bw(base_size = 20))\n```\n:::\n\n\n\n## Quick Data Cleaning\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nspotify <- spotify |> \n  mutate(duration_min = duration_ms / 60000)\n```\n:::\n\n\n\n::: question\n- What is this code doing?\n- Why might I be doing it?\n:::\n\n## The regression model, revisited {.smaller}\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nspotify_fit <- lm(danceability ~ duration_min, data = spotify)\n\ntidy(spotify_fit, conf.int = TRUE, conf.level = 0.95) |>\n   kable(digits = 3)\n```\n\n::: {.cell-output-display}\n\n\n|term         | estimate| std.error| statistic| p.value| conf.low| conf.high|\n|:------------|--------:|---------:|---------:|-------:|--------:|---------:|\n|(Intercept)  |    0.781|     0.028|    28.351|   0.000|    0.727|     0.835|\n|duration_min |   -0.024|     0.008|    -3.151|   0.002|   -0.039|    -0.009|\n\n\n:::\n:::\n\n\n\n- There is strong statistical evidence that there is a linear relationship between the duration of a song and it's danceability.\n\n- We are 95% confidence that as the length of a song increases by one minute the danceability will derease by between 0.009 and 0.039 units.\n\n## Mathematical representation, visualized {.midi}\n\n$$\nY|X \\sim N(\\beta_0 + \\beta_1 X, \\sigma_\\epsilon^2)\n$$\n\n![Image source: *Introduction to the Practice of Statistics (5th ed)*](images/04/regression.png){fig-align=\"center\"}\n\n# Model conditions\n\n## Model conditions\n\n1.  **Linearity:** There is a linear relationship between the outcome and predictor variables\n2.  **Constant variance:** The variability of the errors is equal for all values of the predictor variable\n3.  **Normality:** The errors follow a normal distribution\n4.  **Independence:** The errors are independent from each other\n\n## WARNING {.smaller}\n\n- All of these assumptions are for the population\n- We want to determine whether they are met from your data\n- In real life, these conditions are *almost always* violated in one way or another\n- Questions you should ask yourself:\n    + Are my conditions close enough to being satisfied that I can trust the results of my inference\n    + Do I have reason to believe that my conditions are *GROSSLY* violated?\n    + Based on what I see, how trustworthy do I think the results of my inference are.\n    \n## ENGAGE: SOAP BOX {.smaller}\n\nStatistics and numbers are often used to make arguments seem more \"rigorous\" or infallable. I'm sure you've heard the phrase \"the numbers are the numbers\" or \"you can't argue with the numbers\". More often than not, this is **BULLSHIT**. Most data analyses involve making decision which are subjective. The interpretability of any form of statistical inference is heavily influenced by whether the assumptions and conditions of that inference is met, which is almost never is. It is up to the practitioner to determine whether those conditions are met and what impact those conditions have on the results of those analyses. In my work, I rarely encounter practicitions who even know what the conditions are, let alone understand why they are important. **FURTHERMORE!!!** the quality of your analysis is only as good as the quality of your data. Remember a crap study design will yield crap data which will yield crappy analysis.\n\n\n<!-- ## Linearity -->\n\n<!-- -   If the linear model, $\\hat{y}_i = \\hat{\\beta}_0 + \\hat{\\beta}_1x_i$, adequately describes the relationship between $X$ and $Y$, then the residuals should reflect random (chance) error -->\n\n<!-- -   To assess this, we can look at a plot of the residuals vs. the fitted values -->\n\n<!-- -   **Linearity satisfied** if there is no distinguishable pattern in the residuals plot, i.e. the residuals should be randomly scattered -->\n\n<!-- -   A non-random pattern (e.g. a parabola) suggests a linear model does not adequately describe the relationship between $X$ and $Y$ -->\n\n<!-- ## Linearity -->\n\n<!-- ✅ The residuals vs. fitted values plot should show a random scatter of residuals (no distinguishable pattern or structure) -->\n\n<!-- ```{r res-vs-fit} -->\n<!-- #| echo: false -->\n<!-- heb_aug <- augment(heb_fit) -->\n\n<!-- gf_point(.resid ~ .fitted, data = heb_aug) |>  -->\n<!--   gf_hline(yintercept = 0, linetype = \"dashed\") |>  -->\n<!--   gf_labs( -->\n<!--     x = \"Fitted value\", y = \"Residual\", -->\n<!--     title = \"Residuals vs. fitted values\" -->\n<!--   ) -->\n<!-- ``` -->\n\n\n<!-- ## The augment function {.smaller} -->\n\n<!-- ```{r} -->\n<!-- heb_aug <- augment(heb_fit) -->\n\n<!-- head(heb_aug) |> kable() -->\n<!-- ``` -->\n\n<!-- ## Residuals vs. fitted values (code) -->\n\n<!-- ```{r} -->\n<!-- #| echo: true -->\n<!-- #| ref.label: \"res-vs-fit\" -->\n<!-- #| fig.show: \"hide\" -->\n<!-- ``` -->\n\n<!-- ## Non-linear relationships -->\n\n<!-- ```{r} -->\n<!-- #| echo: false -->\n<!-- set.seed(1234) -->\n\n<!-- n = 100 -->\n\n<!-- df <- tibble( -->\n<!--   x = -49:50, -->\n<!--   e_curved = rnorm(n, 0, 150), -->\n<!--   y_curved = x^2 + e_curved, -->\n<!--   e_slight_curve = sort(rbeta(n, 5, 1) * 200) + rnorm(n, 0, 5), -->\n<!--   y_slight_curve = x + e_slight_curve, -->\n<!--   x_fan = seq(0, 3.99, 4 / n), -->\n<!--   y_fan = c(rnorm(n / 8, 3, 1), rnorm(n / 8, 3.5, 2), rnorm(n / 8, 4, 2.5), rnorm(n / 8, 4.5, 3), rnorm(n / 4, 5, 4), rnorm((n / 4) + 2, 6, 5)) -->\n<!-- ) -->\n<!-- ``` -->\n\n<!-- ::: columns -->\n<!-- ::: {.column width=\"50%\"} -->\n<!-- ```{r} -->\n<!-- #| out.width: \"100%\" -->\n<!-- #| fig.asp: 1.2 -->\n<!-- #| echo: false -->\n\n<!-- p1 <- ggplot(df, aes(x = x, y = y_curved)) + -->\n<!--   geom_point() + -->\n<!--   geom_smooth(method = \"lm\", se = FALSE, color = \"#8F2D56\") + -->\n<!--   labs( -->\n<!--     x = \"X\", y = \"Y\", -->\n<!--     title = \"Observed data + model\" -->\n<!--     ) -->\n\n<!-- curved_fit <- lm(y_curved ~ x, data = df) -->\n\n<!-- curved_aug <- augment(curved_fit) -->\n\n<!-- p2 <- ggplot(curved_aug, aes(x = .fitted, y = .resid)) + -->\n<!--   geom_point() + -->\n<!--   geom_hline(yintercept = 0, linetype = \"dashed\") + -->\n<!--   labs( -->\n<!--     x = \"Fitted value\", y = \"Residual\", -->\n<!--     title = \"Residuals vs. fitted values\" -->\n<!--   ) + -->\n<!--   ylim(-2000, 2000) -->\n\n<!-- p1 / p2 + -->\n<!--   plot_annotation(title = \"Obviously curved\") -->\n<!-- ``` -->\n<!-- ::: -->\n\n<!-- ::: {.column width=\"50%\"} -->\n<!-- ```{r} -->\n<!-- #| out.width: \"100%\" -->\n<!-- #| fig.asp: 1.2 -->\n<!-- #| echo: false -->\n\n<!-- p1 <- ggplot(df, aes(x = x, y = y_slight_curve)) + -->\n<!--   geom_point() + -->\n<!--   geom_smooth(method = \"lm\", se = FALSE, color = \"#8F2D56\") + -->\n<!--   labs( -->\n<!--     x = \"X\", y = \"Y\", -->\n<!--     title = \"Observed data + model\" -->\n<!--     ) -->\n\n<!-- slight_curve_fit <- lm(y_slight_curve ~ x, data = df) -->\n\n<!-- slight_curve_aug <- augment(slight_curve_fit) -->\n\n<!-- p2 <- ggplot(slight_curve_aug, aes(x = .fitted, y = .resid)) + -->\n<!--   geom_point() + -->\n<!--   geom_hline(yintercept = 0, linetype = \"dashed\") + -->\n<!--   labs( -->\n<!--     x = \"Fitted value\", y = \"Residual\", -->\n<!--     title = \"Residuals vs. fitted values\" -->\n<!--   ) -->\n\n<!-- p1 / p2 + -->\n<!--   plot_annotation(title = \"Not so obviously curved\") -->\n<!-- ``` -->\n<!-- ::: -->\n<!-- ::: -->\n\n<!-- ## Constant variance {.midi} -->\n\n<!-- -   If the spread of the distribution of $Y$ is equal for all values of $X$ then the spread of the residuals should be approximately equal for each value of $X$ -->\n\n<!-- -   To assess this, we can look at a plot of the residuals vs. the fitted values -->\n\n<!-- -   **Constant variance satisfied** if the vertical spread of the residuals is approximately equal as you move from left to right (i.e. there is no \"fan\" pattern) -->\n\n<!-- -   A fan pattern suggests the constant variance assumption is not satisfied and transformation or some other remedy is required (more on this later in the semester) -->\n\n<!-- -   **CAREFUL**: Inconsistent distribution of $X$s can make it seem as if there is non-constant variance -->\n\n<!-- ## Constant variance -->\n\n<!-- ✅ The vertical spread of the residuals is relatively constant across the plot -->\n\n<!-- ```{r} -->\n<!-- #| ref.label: \"res-vs-fit\" -->\n<!-- #| echo: false -->\n<!-- ``` -->\n\n<!-- ## Non-constant variance -->\n\n<!-- ::: columns -->\n<!-- ::: {.column width=\"50%\"} -->\n<!-- ```{r} -->\n<!-- #| out.width: \"100%\" -->\n<!-- #| echo: false -->\n<!-- ggplot(df, aes(x = x_fan, y = y_fan)) + -->\n<!--   geom_point() + -->\n<!--   geom_smooth(method = \"lm\", se = FALSE, color = \"#8F2D56\") + -->\n<!--   labs( -->\n<!--     x = \"X\", y = \"Y\", -->\n<!--     title = \"Observed data + model\" -->\n<!--     ) -->\n<!-- ``` -->\n<!-- ::: -->\n\n<!-- ::: {.column width=\"50%\"} -->\n<!-- ```{r} -->\n<!-- #| out.width: \"100%\" -->\n<!-- #| echo: false -->\n\n<!-- fan_fit <- lm(y_fan ~ x_fan, data = df) -->\n\n<!-- fan_aug <- augment(fan_fit) -->\n\n<!-- ggplot(fan_aug, aes(x = .fitted, y = .resid)) + -->\n<!--   geom_point() + -->\n<!--   geom_hline(yintercept = 0, linetype = \"dashed\") + -->\n<!--   labs( -->\n<!--     x = \"Fitted value\", y = \"Residual\", -->\n<!--     title = \"Residuals vs. fitted values\" -->\n<!--   ) + -->\n<!--   ylim(-15, 15) -->\n<!-- ``` -->\n<!-- ::: -->\n<!-- ::: -->\n\n<!-- - Think: Is my error/variance proportional to the thing I'm predicting? -->\n\n\n<!-- ## Normality {.midi} -->\n\n<!-- -   The linear model assumes that the distribution of $Y$ is Normal for every value of $X$ -->\n\n<!-- -   This is impossible to check in practice, so we will look at the overall distribution of the residuals to assess if the normality assumption is satisfied -->\n\n<!-- -   **Normality satisfied** if a histogram of the residuals is approximately normal -->\n\n<!--     -   Can also check that the points on a normal QQ-plot falls along a diagonal line -->\n\n<!-- -   Most inferential methods for regression are robust to some departures from normality, so we can proceed with inference if the sample size is sufficiently large, $n > 30$ -->\n\n<!-- ## Normality -->\n\n<!-- ```{r} -->\n<!-- #| echo: false -->\n\n<!-- ggplot(heb_aug, aes(x = .resid)) + -->\n<!--   geom_histogram(bins = 7, color = \"white\") + -->\n<!--   labs( -->\n<!--     x = \"Residual\", -->\n<!--     y = \"Count\", -->\n<!--     title = \"Histogram of residuals\" -->\n<!--   ) -->\n<!-- ``` -->\n\n<!-- ## Check normality using a QQ-plot -->\n\n<!-- ::: columns -->\n<!-- ::: {.column width=\"50%\"} -->\n<!-- ```{r} -->\n<!-- #| code-fold: true -->\n<!-- gf_histogram(~.resid, data = heb_aug, -->\n<!--              bins=7, color = \"white\") |>  -->\n<!--   gf_labs( -->\n<!--     x = \"Residual\", -->\n<!--     y = \"Count\", -->\n<!--     title = \"Histogram of residuals\" -->\n<!--   ) -->\n<!-- ``` -->\n\n<!-- ```          -->\n<!-- ``` -->\n<!-- ::: -->\n\n<!-- ::: {.column width=\"50%\"} -->\n<!-- ```{r} -->\n<!-- #| code-fold: true -->\n<!-- gf_qq(~.resid, data = heb_aug) |>  -->\n<!--   gf_qqline() |>   -->\n<!--   gf_labs(x = \"Theoretical quantile\",  -->\n<!--        y = \"Observed quantile\",  -->\n<!--        title = \"Normal QQ-plot of residuals\") -->\n<!-- ``` -->\n<!-- ::: -->\n<!-- ::: -->\n\n<!-- -   Assess whether residuals lie along the diagonal line of the Quantile-quantile plot (QQ-plot). -->\n\n<!-- -   If so, the residuals are normally distributed. -->\n\n<!-- ## Normality -->\n\n<!-- ```{r} -->\n<!-- #| echo: false -->\n<!-- #| out.width: \"80%\" -->\n\n<!-- ggplot(heb_aug, aes(sample = .resid)) + -->\n<!--   stat_qq()+ -->\n<!--   stat_qq_line() +  -->\n<!--   labs(x = \"Theoretical quantile\",  -->\n<!--        y = \"Observed quantile\",  -->\n<!--        title = \"Normal QQ-plot of residuals\") -->\n<!-- ``` -->\n\n<!-- ❌ The residuals do not appear to follow a normal distribution, because the points do not lie on the diagonal line, so normality is not satisfied. -->\n\n<!-- ✅ The sample size  $n =  37 > 30$, so the sample size is large enough to relax this condition and proceed with inference. -->\n\n\n<!-- ## Independence {.midi} -->\n\n<!-- -   We can often check the independence assumption based on the context of the data and how the observations were collected -->\n\n<!-- -   Two common violations of the independence assumption: -->\n\n<!--     -   **Serial Effect**: If the data were collected over time, plot the residuals in time order to see if there is a pattern (serial correlation) -->\n\n<!--     -   **Cluster Effect**: If there are subgroups represented in the data that are not accounted for in the model (e.g., type of supermarket), you can color the points in the residual plots by group to see if the model systematically over or under predicts for a particular subgroup -->\n\n<!-- ## Independence {.nonincremental} -->\n\n<!-- Recall the description of the data: -->\n\n<!-- > -   Average household income (per zip code) and number of organic vegetable offerings in San Antonio, TX -->\n<!-- > -->\n<!-- > -   Data from HEB website, compiled by high school student Linda Saucedo, Fall 2019 -->\n\n<!-- <br> -->\n\n<!-- ❌ Based on the information we have,  it's  unclear if the data are independent. In fact, I'd guess that they are likely geographically correlated. -->\n\n<!-- ## Recap -->\n\n<!-- Used residual plots to check conditions for SLR: -->\n\n<!-- ::: columns -->\n<!-- ::: {.column width=\"50%\"} -->\n<!-- ::: nonincremental -->\n<!-- -   Linearity -->\n<!-- -   Constant variance -->\n<!-- ::: -->\n<!-- ::: -->\n\n<!-- ::: {.column width=\"50%\"} -->\n<!-- ::: nonincremental -->\n<!-- -   Normality -->\n<!-- -   Independence -->\n<!-- ::: -->\n<!-- ::: -->\n<!-- ::: -->\n\n<!-- . . . -->\n\n<!-- ::: question -->\n<!-- 1. Which of these conditions are required for fitting a SLR (and not doing any inference)?  -->\n<!-- 2. Which for simulation-based inference for the slope for an SLR?  -->\n<!-- 3. Which for inference with mathematical models? -->\n<!-- ::: -->\n\n<!-- ```{r} -->\n<!-- #| echo: false -->\n<!-- countdown(minutes = 3, font_size = \"2em\") -->\n<!-- ``` -->\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}